--[[
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
]]

-- Variables: Our target number of divisors; our iterator; our divisor count
target = 500
counter = target
divisors = 1

-- Setting up the first triangle number at our target amount of divisors.
triangle = 0
for i = 1, counter do
	triangle = triangle + i
end

while true do
	-- Every number is divisible by 1, so we start our count at 1, and start looking at 2
	divisors = 1
	triangleroot = math.floor(math.sqrt(triangle))
	-- We only look at numbers up to the square root, since every divisor over that number has a counterpart (e.g. 15/3 = 5, so both 5 and 3 are divisors)
	for i = 2, triangleroot do
		if triangle % i == 0 then
			divisors = divisors + 1
			-- If i was exactly the square root (so not equal to the rounded sqrt, but the real sqrt) don't count it twice
			if (i * i ~= triangle) then
				divisors = divisors + 1
			end
		end
	end
	-- If we have 500 or more divisors for this number, then break the while-loop, we're done
	if divisors > 500 then
		break
	end
	-- Otherwise, increment our counter and add the new number to our triangle number
	counter = counter + 1
	triangle = triangle + counter
end

-- Write our final answer
io.write(string.format("The value of the first triangle number to have over %d divisors is %.0f with %d divisors", target, triangle, divisors))